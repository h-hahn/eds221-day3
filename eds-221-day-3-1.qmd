---
title: "eds-221-day-3-1"
format: html
editor: visual
---pwd
---

```{r}
library(palmerpenguins)
library(tidyverse)
```

## Conditional statement

```{r}
temperature <- 95

if (temperature >97) {
  print("Temperature warning")
 } else 
  print("No temperature warning")
```

Create an if else statement for blue whale lengths. Create a variable blue whale, which has a value of 40.

Add an if else statement that returns "GIANT" if exceeds 35, "MEDIUM" if the length is between 20 and 35, or "SMALL" if the length is \<=20.

```{r}
blue_whale <- 40

if (blue_whale > 35) {
  print("GIANT")
} else if (20 < blue_whale & blue_whale <= 35) {
    print("MEDIUM")
  } else if (blue_whale <=20) {
    print("SMALL")
  }
```

## Switch statement

```{r}
housing_type <- "whole"

switch(housing_type, 
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100"))

if (housing_type == "whole") {
  print("1100")
} else if (housing_type == "double") {
  print("750")
} else if (housing_type == "single") {
  print("400")
}
```

## For loops

```{r}
height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq_along(height)) {
  half_height = height[i]/2
  print(half_height)
}

# for each value in the height vector, return the sum of the value plus the one right after it
for (i in seq(1:(length(height)-1))) {
  height_add = height[i] + height[i + 1]
  print(height_add)
}

# write a for loop that calculates the value of height for each element divided by the mean of the entire height vector
for (i in seq_along(height)) {
  height_div = height[i]/mean(height)
  print(height_div)
}
```

## For loop with condition

write a for loop with a conditional (if) statement that returns the means of all NUMERIC variables in the penguins dataset

-   is.numeric (asks is this thing numeric?)

-   mean(vec, na.rm =TRUE)

```{r}
penguins <- penguins

for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]]))
  { penguins_mean <- mean(penguins[[i]], na.rm = TRUE) 
  print(penguins_mean)
  }}

```

## Functional programming for easier iteration

use apply() to iterate over rows or columns. MARGIN = 1 (rows), MARGIN = 2 (columns)

```{r}
apply(X = mtcars, MARGIN = 2, FUN = median)

apply(mtcars, 2, median)
```

## dplyr::accross()

Starter: find the mean flipper length of penguins by species

```{r}
penguins %>% 
  group_by(species, sex) %>% 
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE), 
            sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))
```

```{r}
penguins %>% 
  group_by(species, island) %>% 
  summarize(across(where(is.numeric), mean, na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love enchiladas"

if (str_detect(food, "burritos")) {
  print("yay burritos!")
} else {
  print("what about burritos?")
}
```
